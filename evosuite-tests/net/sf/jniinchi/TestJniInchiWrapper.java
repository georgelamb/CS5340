/*
 * This file was automatically generated by EvoSuite
 */

package net.sf.jniinchi;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import net.sf.jniinchi.INCHI_OPTION;
import net.sf.jniinchi.JniInchiException;
import net.sf.jniinchi.JniInchiInput;
import net.sf.jniinchi.JniInchiInputInchi;
import net.sf.jniinchi.JniInchiWrapper;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestJniInchiWrapper {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JniInchiInput jniInchiInput0 = new JniInchiInput();
          // Undeclared exception!
          try {
            JniInchiWrapper.getInchi(jniInchiInput0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.getInchi(JniInchiWrapper.java:238)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      JniInchiInput jniInchiInput0 = null;
      try {
        jniInchiInput0 = new JniInchiInput((List) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null options
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<INCHI_OPTION> linkedList0 = new LinkedList<INCHI_OPTION>();
      INCHI_OPTION iNCHI_OPTION0 = INCHI_OPTION.RecMet;
      linkedList0.offerFirst(iNCHI_OPTION0);
      String string0 = JniInchiWrapper.checkOptions((List<INCHI_OPTION>) linkedList0);
      assertEquals("/RecMet ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      JniInchiInputInchi jniInchiInputInchi0 = null;
      try {
        jniInchiInputInchi0 = new JniInchiInputInchi("F:fKQ3L(y/3o>,4k", (List) linkedList0);
        fail("Expecting exception: JniInchiException");
      } catch(JniInchiException e) {
        /*
         * Unrecognised InChI option
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      JniInchiInput jniInchiInput0 = null;
      try {
        jniInchiInput0 = new JniInchiInput("FX43~`{KCOb3Om2nnF)f");
        fail("Expecting exception: JniInchiException");
      } catch(JniInchiException e) {
        /*
         * Unrecognised InChI option
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.checkOptions((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null options
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      JniInchiInput jniInchiInput0 = new JniInchiInput("/RecMet /RecMet ");
      assertNotNull(jniInchiInput0);
      assertEquals("/RecMet /RecMet", jniInchiInput0.getOptions());
  }

  @Test
  public void test7()  throws Throwable  {
      try {
        JniInchiWrapper.checkOptions("-_,oFXoK}@EN0S-");
        fail("Expecting exception: JniInchiException");
      } catch(JniInchiException e) {
        /*
         * Unrecognised InChI option
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.getInchi((JniInchiInput) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null input
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JniInchiInput jniInchiInput0 = new JniInchiInput();
          // Undeclared exception!
          try {
            JniInchiWrapper.getStdInchi(jniInchiInput0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.getStdInchi(JniInchiWrapper.java:261)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.getStdInchi((JniInchiInput) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null input
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JniInchiInputInchi jniInchiInputInchi0 = new JniInchiInputInchi("vTihVw]wL<");
          // Undeclared exception!
          try {
            JniInchiWrapper.getInchiFromInchi(jniInchiInputInchi0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.getInchiFromInchi(JniInchiWrapper.java:284)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.getInchiFromInchi((JniInchiInputInchi) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null input
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JniInchiInputInchi jniInchiInputInchi0 = new JniInchiInputInchi("-STmo3=`pZW=($pGhKn");
          // Undeclared exception!
          try {
            JniInchiWrapper.getStructureFromInchi(jniInchiInputInchi0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.getStructureFromInchi(JniInchiWrapper.java:303)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.getStructureFromInchi((JniInchiInputInchi) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null input
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            JniInchiWrapper.getInchiKey("c3");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.getInchiKey(JniInchiWrapper.java:323)
             * sun.reflect.GeneratedMethodAccessor88.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.getInchiKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null InChI
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            JniInchiWrapper.checkInchiKey("Gs");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.checkInchiKey(JniInchiWrapper.java:343)
             * sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.checkInchiKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null InChI key
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            JniInchiWrapper.checkInchi("'nvma'OEl#Y $B|V", false);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.checkInchi(JniInchiWrapper.java:371)
             * sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.checkInchi((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null InChI
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          // Undeclared exception!
          try {
            JniInchiWrapper.getInputFromAuxInfo("]iowslu");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/home/ac1gf/.jnati/repo/jniinchi/1.03_1/LINUX-AMD64\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.File.mkdir(File.java:1237)
             * java.io.File.mkdirs(File.java:1266)
             * net.sf.jnati.deploy.repository.LocalRepository.createArtefact(LocalRepository.java:90)
             * net.sf.jnati.deploy.NativeArtefactLocator.deployArtefactToLocalRepository(NativeArtefactLocator.java:127)
             * net.sf.jnati.deploy.NativeArtefactLocator.getArtefact(NativeArtefactLocator.java:71)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:47)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:41)
             * net.sf.jnati.deploy.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:37)
             * net.sf.jniinchi.JniInchiWrapper.loadLibrary(JniInchiWrapper.java:84)
             * net.sf.jniinchi.JniInchiWrapper.getWrapper(JniInchiWrapper.java:128)
             * net.sf.jniinchi.JniInchiWrapper.getInputFromAuxInfo(JniInchiWrapper.java:389)
             * sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        JniInchiWrapper.getInputFromAuxInfo((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Null AuxInfo
         */
      }
  }
}
